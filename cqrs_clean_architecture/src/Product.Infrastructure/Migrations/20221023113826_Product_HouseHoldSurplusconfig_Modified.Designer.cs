// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Product.Infrastructure.Persistence;

#nullable disable

namespace Product.Infrastructure.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20221023113826_Product_HouseHoldSurplusconfig_Modified")]
    partial class Product_HouseHoldSurplusconfig_Modified
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Product.Core.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("code")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Branch", "common");
                });

            modelBuilder.Entity("Product.Core.Entities.Duration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("DurationId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Duration", "config");
                });

            modelBuilder.Entity("Product.Core.Entities.Fund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SortOrder")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Fund", "config");
                });

            modelBuilder.Entity("Product.Core.Entities.GroupType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowNew")
                        .HasColumnType("bit");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DefaultIntallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SortOrder")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DefaultIntallmentTypeId");

                    b.ToTable("GroupType", "config");
                });

            modelBuilder.Entity("Product.Core.Entities.InstallmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("Installment")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("InstallmentType", "config");
                });

            modelBuilder.Entity("Product.Core.Entities.Lookup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lookup", "common");
                });

            modelBuilder.Entity("Product.Core.Entities.OfficeMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ProductId");

                    b.ToTable("OfficeMapping", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("Date");

                    b.Property<DateTime>("EffectiveTo")
                        .HasColumnType("Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int>("SortOrder")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Product", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Condition")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ConditionAmount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVatable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWhileAdmission")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWhileDisburse")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("TransactionType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("VatPercentage")
                        .HasColumnType("Decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("Condition");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransactionType");

                    b.ToTable("ProductCharge", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDuration", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductFund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("FundId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFund", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductGracePeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<int>("GracePeriod")
                        .HasColumnType("int");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGracePeriod", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DefaultDuration")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DefaultInstallmentType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductGroupProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DefaultDuration");

                    b.HasIndex("DefaultInstallmentType");

                    b.HasIndex("GroupTypeId");

                    b.HasIndex("ProductGroupProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGroup", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductGroupType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GroupTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGroupType", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductHouseholdSurplusConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AboveThirdCycleSurplusPercentage")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FirstCycleSurplusPercentage")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("OnlyForSurvey")
                        .HasColumnType("bit");

                    b.Property<bool>("OverwriteExistingLoanRangePolicy")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("SecondCycleSurplusPercentage")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("ThirdCycleSurplusPercentage")
                        .HasColumnType("Decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("ProductHouseholdSurplusConfiguration", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductInstallmentCount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("GracePeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InstallmentCount")
                        .HasColumnType("int");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("GracePeriodId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInstallmentCount", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductInstallmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SortOrder")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInstallmentType", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductInterestRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("APR")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DecliningInterestRate")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal?>("DecliningInterestRateDisplay")
                        .IsRequired()
                        .HasColumnType("Decimal(18,4)");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("FlatInterestRate")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal?>("FlatInterestRateDisplay")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductInterestRate", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductMinimumDepositConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartialAllowed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaximumOfWithdrawal")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("MimimumAmount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMinimumDepositConfiguration", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductModeOfPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModeOfCollection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeOfDisbursement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductModeOfPayment", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicyAdvanceCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AdvanceAllowedInstallmentNo")
                        .HasColumnType("int");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdvanceAllowedWithFullOutstanding")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdvanceInstallmentAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("MaximumNumberOfAdvanceCollectionAllowedPerLoan")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal?>("MaximumNumberOfInstallmentAllowed")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal?>("MinimumNumberOfAdvanceCollectionAllowedPerDay")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPolicyAdvanceCollection", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicyLoan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaximumIncrementAmount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("MaximumLoanAmount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("MaximumLoanAmountForFirstCycle")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("MinimumIncrementAmount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("MinimumLoanAmount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPolicyLoan", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicyLoanApprovalLimit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LimitFrom")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<decimal>("LimitTo")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<int>("LoanCycle")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPolicyLoanApprovalLimit", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicySavings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Cycle")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPolicySavings", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicySecurity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Cycle")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPolicySecurity", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicySetup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DaysBetweenTwoLoanCycles")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<int?>("FromAgeRange")
                        .HasColumnType("int");

                    b.Property<Guid?>("Gender")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasMutilpurposeRisk")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSavings")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSecurity")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdjustSavingsDuringWriteOff")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAgeRangeApplied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApplicableGender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDaysBetweenTwoLoanCycles")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleInstallmentCollectionAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoOfMemberAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParallelLoanAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartialCollectionAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeeksRequiredToDisburse")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NoOfMemberAllowed")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.Property<int?>("ToAgeRange")
                        .HasColumnType("int");

                    b.Property<int?>("WeeksRequiredToDisburse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Gender");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPolicySetup", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicyUpdateMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasSavingsReturned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDormentMember")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInActivemMember")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoActiveLoanAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoActiveSavingsAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoTransaction")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NoTransactionForLastMonth")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPolicyUpdateMember", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductScheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SchemeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SchemeId");

                    b.ToTable("ProductScheme", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductTenure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPerBase")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("BaseAmount")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<Guid>("CalculationMode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CellingOrRound")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CellingOrRoundValue")
                        .HasColumnType("Decimal(18,4)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("GracePeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("CalculationMode");

                    b.HasIndex("CellingOrRound");

                    b.HasIndex("DurationId");

                    b.HasIndex("GracePeriodId");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTenure", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProductType", "config");
                });

            modelBuilder.Entity("Product.Core.Entities.SavingsSecurityConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DayDifference")
                        .HasColumnType("int");

                    b.Property<Guid?>("DurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndingDate")
                        .HasColumnType("Date");

                    b.Property<Guid>("Frequency")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InstallmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdjustwithLoan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPostSavingsInterest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSecurityLapseDetails")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NoOfTransactions")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingDate")
                        .HasColumnType("Date");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("Frequency");

                    b.HasIndex("InstallmentTypeId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("SavingsSecurityConfiguration", "product");
                });

            modelBuilder.Entity("Product.Core.Entities.Scheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorizeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AuthorizedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AuthorizedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("Date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("SortOrder")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Scheme", "config");
                });

            modelBuilder.Entity("Product.Core.Entities.GroupType", b =>
                {
                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("GroupTypes")
                        .HasForeignKey("DefaultIntallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("InstallmentType");
                });

            modelBuilder.Entity("Product.Core.Entities.OfficeMapping", b =>
                {
                    b.HasOne("Product.Core.Entities.Branch", "Branch")
                        .WithMany("OfficeMappings")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("OfficeMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.Product", b =>
                {
                    b.HasOne("Product.Core.Entities.Lookup", "Lookup")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Lookup");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductCharge", b =>
                {
                    b.HasOne("Product.Core.Entities.Lookup", "LookupCondition")
                        .WithMany("ConditionCharges")
                        .HasForeignKey("Condition")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductCharges")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductCharges")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductCharges")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Lookup", "LookupTransactionType")
                        .WithMany("TransactionTypeCharges")
                        .HasForeignKey("TransactionType")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("LookupCondition");

                    b.Navigation("LookupTransactionType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductDuration", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductDurations")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductDurations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductFund", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductFunds")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Fund", "Fund")
                        .WithMany("ProductFunds")
                        .HasForeignKey("FundId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductFunds")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductFunds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("Fund");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductGracePeriod", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductGracePeriods")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductGracePeriods")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductGracePeriods")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductGroup", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductGroups")
                        .HasForeignKey("DefaultDuration")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductGroups")
                        .HasForeignKey("DefaultInstallmentType")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.GroupType", "GroupType")
                        .WithMany("ProductGroups")
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "ProductGroupProduct")
                        .WithMany("ProductGroupProducts")
                        .HasForeignKey("ProductGroupProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductGroups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("GroupType");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");

                    b.Navigation("ProductGroupProduct");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductGroupType", b =>
                {
                    b.HasOne("Product.Core.Entities.GroupType", "GroupType")
                        .WithMany("ProductGroupTypes")
                        .HasForeignKey("GroupTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductGroupTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("GroupType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductInstallmentCount", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductInstallmentCounts")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.ProductGracePeriod", "ProductGracePeriod")
                        .WithMany("ProductInstallmentCounts")
                        .HasForeignKey("GracePeriodId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductInstallmentCounts")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductInstallmentCounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");

                    b.Navigation("ProductGracePeriod");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductInstallmentType", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductInstallmentTypes")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductInstallmentTypes")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductInstallmentTypes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductInterestRate", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductInterestRates")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductInterestRates")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductInterestRates")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductMinimumDepositConfiguration", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany()
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductModeOfPayment", b =>
                {
                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicyAdvanceCollection", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductPolicyAdvanceCollections")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductPolicyAdvanceCollections")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductPolicyAdvanceCollections")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicyLoan", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductPolicyLoans")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductPolicyLoans")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductPolicyLoans")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicyLoanApprovalLimit", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductPolicyLoanApprovalLimits")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductPolicyLoanApprovalLimits")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductPolicyLoanApprovalLimits")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicySavings", b =>
                {
                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductPolicySavings")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductPolicySavings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicySecurity", b =>
                {
                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductPolicySecurities")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductPolicySecurities")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicySetup", b =>
                {
                    b.HasOne("Product.Core.Entities.Lookup", "Lookup")
                        .WithMany("ProductPolicySetups")
                        .HasForeignKey("Gender");

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductPolicySetups")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Lookup");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductPolicyUpdateMember", b =>
                {
                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductPolicyUpdateMembers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductScheme", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany()
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany()
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductSchemes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Scheme", "Scheme")
                        .WithMany("ProductSchemes")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("Product");

                    b.Navigation("Scheme");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductTenure", b =>
                {
                    b.HasOne("Product.Core.Entities.Lookup", "LookupCalculationMode")
                        .WithMany("ProductTenureCalculationMode")
                        .HasForeignKey("CalculationMode")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Lookup", "LookupCellingOrRound")
                        .WithMany("ProductTenureCellingOrRound")
                        .HasForeignKey("CellingOrRound")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Duration", "Duration")
                        .WithMany("ProductTenures")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.ProductGracePeriod", "ProductGracePeriod")
                        .WithMany("ProductTenures")
                        .HasForeignKey("GracePeriodId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", "InstallmentType")
                        .WithMany("ProductTenures")
                        .HasForeignKey("InstallmentTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("ProductTenures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Duration");

                    b.Navigation("InstallmentType");

                    b.Navigation("LookupCalculationMode");

                    b.Navigation("LookupCellingOrRound");

                    b.Navigation("Product");

                    b.Navigation("ProductGracePeriod");
                });

            modelBuilder.Entity("Product.Core.Entities.SavingsSecurityConfiguration", b =>
                {
                    b.HasOne("Product.Core.Entities.Duration", null)
                        .WithMany("SavingsSecurityConfigurations")
                        .HasForeignKey("DurationId");

                    b.HasOne("Product.Core.Entities.Lookup", "Lookup")
                        .WithMany()
                        .HasForeignKey("Frequency")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.InstallmentType", null)
                        .WithMany("SavingsSecurityConfigurations")
                        .HasForeignKey("InstallmentTypeId");

                    b.HasOne("Product.Core.Entities.Product", "Product")
                        .WithMany("SavingsSecurityConfigurations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("Product.Core.Entities.ProductType", "ProductType")
                        .WithMany("SavingsSecurityConfigurations")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Lookup");

                    b.Navigation("Product");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Product.Core.Entities.Branch", b =>
                {
                    b.Navigation("OfficeMappings");
                });

            modelBuilder.Entity("Product.Core.Entities.Duration", b =>
                {
                    b.Navigation("ProductCharges");

                    b.Navigation("ProductDurations");

                    b.Navigation("ProductFunds");

                    b.Navigation("ProductGracePeriods");

                    b.Navigation("ProductGroups");

                    b.Navigation("ProductInstallmentCounts");

                    b.Navigation("ProductInstallmentTypes");

                    b.Navigation("ProductInterestRates");

                    b.Navigation("ProductPolicyAdvanceCollections");

                    b.Navigation("ProductPolicyLoanApprovalLimits");

                    b.Navigation("ProductPolicyLoans");

                    b.Navigation("ProductTenures");

                    b.Navigation("SavingsSecurityConfigurations");
                });

            modelBuilder.Entity("Product.Core.Entities.Fund", b =>
                {
                    b.Navigation("ProductFunds");
                });

            modelBuilder.Entity("Product.Core.Entities.GroupType", b =>
                {
                    b.Navigation("ProductGroupTypes");

                    b.Navigation("ProductGroups");
                });

            modelBuilder.Entity("Product.Core.Entities.InstallmentType", b =>
                {
                    b.Navigation("GroupTypes");

                    b.Navigation("ProductCharges");

                    b.Navigation("ProductFunds");

                    b.Navigation("ProductGracePeriods");

                    b.Navigation("ProductGroups");

                    b.Navigation("ProductInstallmentCounts");

                    b.Navigation("ProductInstallmentTypes");

                    b.Navigation("ProductInterestRates");

                    b.Navigation("ProductPolicyAdvanceCollections");

                    b.Navigation("ProductPolicyLoanApprovalLimits");

                    b.Navigation("ProductPolicyLoans");

                    b.Navigation("ProductPolicySavings");

                    b.Navigation("ProductPolicySecurities");

                    b.Navigation("ProductTenures");

                    b.Navigation("SavingsSecurityConfigurations");
                });

            modelBuilder.Entity("Product.Core.Entities.Lookup", b =>
                {
                    b.Navigation("ConditionCharges");

                    b.Navigation("ProductPolicySetups");

                    b.Navigation("ProductTenureCalculationMode");

                    b.Navigation("ProductTenureCellingOrRound");

                    b.Navigation("Products");

                    b.Navigation("TransactionTypeCharges");
                });

            modelBuilder.Entity("Product.Core.Entities.Product", b =>
                {
                    b.Navigation("OfficeMappings");

                    b.Navigation("ProductCharges");

                    b.Navigation("ProductDurations");

                    b.Navigation("ProductFunds");

                    b.Navigation("ProductGracePeriods");

                    b.Navigation("ProductGroupProducts");

                    b.Navigation("ProductGroupTypes");

                    b.Navigation("ProductGroups");

                    b.Navigation("ProductInstallmentCounts");

                    b.Navigation("ProductInstallmentTypes");

                    b.Navigation("ProductInterestRates");

                    b.Navigation("ProductPolicyAdvanceCollections");

                    b.Navigation("ProductPolicyLoanApprovalLimits");

                    b.Navigation("ProductPolicyLoans");

                    b.Navigation("ProductPolicySavings");

                    b.Navigation("ProductPolicySecurities");

                    b.Navigation("ProductPolicySetups");

                    b.Navigation("ProductPolicyUpdateMembers");

                    b.Navigation("ProductSchemes");

                    b.Navigation("ProductTenures");

                    b.Navigation("SavingsSecurityConfigurations");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductGracePeriod", b =>
                {
                    b.Navigation("ProductInstallmentCounts");

                    b.Navigation("ProductTenures");
                });

            modelBuilder.Entity("Product.Core.Entities.ProductType", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SavingsSecurityConfigurations");
                });

            modelBuilder.Entity("Product.Core.Entities.Scheme", b =>
                {
                    b.Navigation("ProductSchemes");
                });
#pragma warning restore 612, 618
        }
    }
}
