//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ArmadaReports.Web.Models.ScoreCards
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AnalyticsEntities : DbContext
    {
        public AnalyticsEntities()
            : base("name=AnalyticsEntities")
        {
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 500;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<GetReportLinkbyUserID_Result> GetReportLinkbyUserID(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportLinkbyUserID_Result>("GetReportLinkbyUserID", userIDParameter);
        }
    
        public virtual ObjectResult<GetScorecardMonthOverMonth_Result> GetScorecardMonthOverMonth(Nullable<System.Guid> userID, Nullable<int> pharmacyID, string drugList, Nullable<int> programID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var pharmacyIDParameter = pharmacyID.HasValue ?
                new ObjectParameter("PharmacyID", pharmacyID) :
                new ObjectParameter("PharmacyID", typeof(int));
    
            var drugListParameter = drugList != null ?
                new ObjectParameter("DrugList", drugList) :
                new ObjectParameter("DrugList", typeof(string));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScorecardMonthOverMonth_Result>("GetScorecardMonthOverMonth", userIDParameter, pharmacyIDParameter, drugListParameter, programIDParameter);
        }
    
        public virtual ObjectResult<GetScorecardPeriod_Result> GetScorecardPeriod(Nullable<System.Guid> userID, Nullable<int> pharmacyID, string drugList, Nullable<int> programID, string period)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var pharmacyIDParameter = pharmacyID.HasValue ?
                new ObjectParameter("PharmacyID", pharmacyID) :
                new ObjectParameter("PharmacyID", typeof(int));
    
            var drugListParameter = drugList != null ?
                new ObjectParameter("DrugList", drugList) :
                new ObjectParameter("DrugList", typeof(string));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            var periodParameter = period != null ?
                new ObjectParameter("Period", period) :
                new ObjectParameter("Period", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScorecardPeriod_Result>("GetScorecardPeriod", userIDParameter, pharmacyIDParameter, drugListParameter, programIDParameter, periodParameter);
        }
    
        public virtual ObjectResult<GetScorecardPeriodLabels_Result> GetScorecardPeriodLabels(string reportPeriod)
        {
            var reportPeriodParameter = reportPeriod != null ?
                new ObjectParameter("reportPeriod", reportPeriod) :
                new ObjectParameter("reportPeriod", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScorecardPeriodLabels_Result>("GetScorecardPeriodLabels", reportPeriodParameter);
        }
    
        public virtual ObjectResult<GetScorecardReferralsVsTimeToFill_Result> GetScorecardReferralsVsTimeToFill(Nullable<System.Guid> userID, Nullable<int> pharmacyID, string drugList)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var pharmacyIDParameter = pharmacyID.HasValue ?
                new ObjectParameter("PharmacyID", pharmacyID) :
                new ObjectParameter("PharmacyID", typeof(int));
    
            var drugListParameter = drugList != null ?
                new ObjectParameter("DrugList", drugList) :
                new ObjectParameter("DrugList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScorecardReferralsVsTimeToFill_Result>("GetScorecardReferralsVsTimeToFill", userIDParameter, pharmacyIDParameter, drugListParameter);
        }
    
        public virtual ObjectResult<GetUserPharmacies_Result> GetUserPharmacies(Nullable<System.Guid> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserPharmacies_Result>("GetUserPharmacies", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserPrograms_Result> GetUserPrograms(Nullable<System.Guid> userID, Nullable<int> pharmacyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(System.Guid));
    
            var pharmacyIDParameter = pharmacyID.HasValue ?
                new ObjectParameter("PharmacyID", pharmacyID) :
                new ObjectParameter("PharmacyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserPrograms_Result>("GetUserPrograms", userIDParameter, pharmacyIDParameter);
        }
    }
}
